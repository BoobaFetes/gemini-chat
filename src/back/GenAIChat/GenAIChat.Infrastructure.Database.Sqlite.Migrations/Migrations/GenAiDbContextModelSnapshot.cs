// <auto-generated />
using System;
using GenAIChat.Infrastructure.Database.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GenAIChat.Infrastructure.Database.Sqlite.Migrations.Migrations
{
    [DbContext(typeof(GenAiDbContext))]
    partial class GenAiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("GenAIChat.Domain.Document.DocumentDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Document.DocumentMetadataDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sha256Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("DocumentMetadatas", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.Task.Cost.TaskCostDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskCosts", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.Task.TaskDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserStoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.UserStoryDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("UserStories", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserStoryGroups", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStoryRequestDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Personas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tasks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("UserStoryRequests", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.ProjectDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectedGroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SelectedGroupId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("GenAIChat.Domain.Document.DocumentDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.ProjectDomain", null)
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Document.DocumentMetadataDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Document.DocumentDomain", null)
                        .WithOne("Metadata")
                        .HasForeignKey("GenAIChat.Domain.Document.DocumentMetadataDomain", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.Task.Cost.TaskCostDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.Group.UserStory.Task.TaskDomain", null)
                        .WithMany("WorkingCosts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.Task.TaskDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.Group.UserStory.UserStoryDomain", null)
                        .WithMany("Tasks")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.UserStoryDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", null)
                        .WithMany("UserStories")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.ProjectDomain", null)
                        .WithMany("Generated")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStoryRequestDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", null)
                        .WithOne("Request")
                        .HasForeignKey("GenAIChat.Domain.Project.Group.UserStoryRequestDomain", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.ProjectDomain", b =>
                {
                    b.HasOne("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", "SelectedGroup")
                        .WithMany()
                        .HasForeignKey("SelectedGroupId");

                    b.Navigation("SelectedGroup");
                });

            modelBuilder.Entity("GenAIChat.Domain.Document.DocumentDomain", b =>
                {
                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.Task.TaskDomain", b =>
                {
                    b.Navigation("WorkingCosts");
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStory.UserStoryDomain", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.Group.UserStoryGroupDomain", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();

                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("GenAIChat.Domain.Project.ProjectDomain", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Generated");
                });
#pragma warning restore 612, 618
        }
    }
}
